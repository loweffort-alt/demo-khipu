<section
  id="cart" 
  class="h-dvh bg-[#8347ad]/25 backdrop-blur-2xl w-1/3 flex flex-col fixed right-0 top-0 p-4 translate-x-full transition-all z-50"
>
  <div class="flex justify-between items-center mb-10">
    <h2 class="font-bold text-lg">
      Carrito de Compras! (<span id="cart-counter">0</span>)
    </h2>
    <img
      id="close-cart"
      class="rounded-md bg-purple-200 hover:bg-purple-300 transition-all p-2 w-12 cursor-pointer"
      src="https://img.icons8.com/?size=100&id=71200&format=png&color=000000"
      alt="close cart icon"
    >
  </div>
  
  <!-- Container para los productos del carrito -->
  <div id="cart-items" class="grid grid-cols-1 gap-4 flex-1 overflow-y-auto">
    <!-- Los productos se cargarÃ¡n aquÃ­ dinÃ¡micamente -->
  </div>
  
  <!-- Mensaje cuando el carrito estÃ¡ vacÃ­o -->
  <div id="empty-cart" class="flex-1 flex items-center justify-center text-gray-500">
    <p>Tu carrito estÃ¡ vacÃ­o</p>
  </div>
  
  <!-- Total y botÃ³n de compra -->
  <div class="mt-4 pt-4 border-t border-purple-300">
    <div class="flex justify-between items-center mb-4">
      <span class="font-bold text-lg">Total: $<span id="cart-total">0.00</span></span>
    </div>
    <button 
      id="buy-button"
      class="w-full p-2 px-4 rounded-xl bg-green-200 cursor-pointer hover:bg-green-300 transition-all disabled:bg-gray-300 disabled:cursor-not-allowed"
      disabled
    >
      Buy ðŸ›’
    </button>
  </div>
</section>

<script>
  const sidebar = document.getElementById('cart');
  const closeBtn = document.getElementById('close-cart');
  const cartItemsContainer = document.getElementById('cart-items');
  const emptyCartMessage = document.getElementById('empty-cart');
  const cartCounter = document.getElementById('cart-counter');
  const cartTotal = document.getElementById('cart-total');
  const buyButton = document.getElementById('buy-button');
  
  let cartItems = JSON.parse(localStorage.getItem('cartItems')) || [];
  
  function renderCartItems() {
    if (cartItems.length === 0) {
      cartItemsContainer.innerHTML = '';
      emptyCartMessage.style.display = 'flex';
      buyButton.disabled = true;
      cartCounter.textContent = '0';
      cartTotal.textContent = '0.00';
      return;
    }
    
    emptyCartMessage.style.display = 'none';
    buyButton.disabled = false;
    
    // Actualizar contador
    const totalItems = cartItems.reduce((sum, item) => sum + item.quantity, 0);
    cartCounter.textContent = totalItems;
    
    // Actualizar total
    const total = cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);
    cartTotal.textContent = total.toFixed(2);
    
    // Renderizar items
    cartItemsContainer.innerHTML = cartItems.map(item => `
      <div class="bg-red-200 p-2 flex justify-between rounded-md gap-4" data-item-id="${item.id}">
        <div class="flex-1">
          <h3 class="font-bold text-base">
            ${item.title?.length > 25 ? item.title.substring(0, 25) + '...' : item.title}
          </h3>
          <p class="text-sm my-2">
            Precio: $${item.price} Ã— ${item.quantity} = $${(item.price * item.quantity).toFixed(2)}
          </p>
          <div class="flex items-center gap-2 mb-2">
            <button class="quantity-btn bg-purple-200 hover:bg-purple-300 px-2 py-1 rounded text-sm" data-action="decrease" data-id="${item.id}">-</button>
            <span class="px-2 font-semibold">${item.quantity}</span>
            <button class="quantity-btn bg-purple-200 hover:bg-purple-300 px-2 py-1 rounded text-sm" data-action="increase" data-id="${item.id}">+</button>
          </div>
          <img
            class="remove-item rounded-md bg-slate-400 hover:bg-slate-500 transition-all p-0.5 w-8 object-contain cursor-pointer"
            src="https://img.icons8.com/?size=50&id=71200&format=png&color=000000"
            alt="delete item icon"
            data-id="${item.id}"
          >
        </div>
        <img
          class="rounded-md bg-neutral-100 p-1 w-24 h-24 object-contain"
          src="${item.image}"
          alt="${item.title}"
        >
      </div>
    `).join('');
  }
  
  function removeFromCart(productId) {
    cartItems = cartItems.filter(item => item.id !== productId);
    localStorage.setItem('cartItems', JSON.stringify(cartItems));
    renderCartItems();
    updateNavbarCounter();
  }
  
  function updateQuantity(productId, action) {
    const itemIndex = cartItems.findIndex(item => item.id === productId);
    if (itemIndex > -1) {
      if (action === 'increase') {
        cartItems[itemIndex].quantity += 1;
      } else if (action === 'decrease') {
        cartItems[itemIndex].quantity -= 1;
        if (cartItems[itemIndex].quantity <= 0) {
          cartItems.splice(itemIndex, 1);
        }
      }
      localStorage.setItem('cartItems', JSON.stringify(cartItems));
      renderCartItems();
      updateNavbarCounter();
    }
  }
  
  function updateNavbarCounter() {
    // Actualizar el contador del navbar si existe
    const navbarCounter = document.getElementById('navbar-cart-counter');
    if (navbarCounter) {
      const totalItems = cartItems.reduce((sum, item) => sum + item.quantity, 0);
      navbarCounter.textContent = totalItems;
    }
  }
  
  function openCart() {
    sidebar?.classList.remove('translate-x-full');
    sidebar?.classList.add('translate-x-0');
    renderCartItems(); // Actualizar contenido al abrir
  }
  
  function closeCart() {
    sidebar?.classList.remove('translate-x-0');
    sidebar?.classList.add('translate-x-full');
  }
  
  // Event listeners
  document.addEventListener('cart:open', openCart);
  closeBtn?.addEventListener('click', closeCart);
  
  // Event listener para cuando se actualiza el carrito desde ProductGrid
  document.addEventListener('cart:updated', () => {
    cartItems = JSON.parse(localStorage.getItem('cartItems')) || [];
    renderCartItems();
    updateNavbarCounter();
  });
  
  // Event delegation para botones dinÃ¡micos
  cartItemsContainer?.addEventListener('click', (e) => {
    const removeBtn = e.target.closest('.remove-item');
    const quantityBtn = e.target.closest('.quantity-btn');
    
    if (removeBtn) {
      const productId = parseInt(removeBtn.dataset.id);
      removeFromCart(productId);
    } else if (quantityBtn) {
      const productId = parseInt(quantityBtn.dataset.id);
      const action = quantityBtn.dataset.action;
      updateQuantity(productId, action);
    }
  });
  
  // BotÃ³n de compra
  buyButton?.addEventListener('click', () => {
    if (cartItems.length > 0) {
      alert(`Â¡Compra realizada por $${cartTotal.textContent}!\nGracias por tu compra ðŸŽ‰`);
      
      // Limpiar carrito despuÃ©s de comprar
      cartItems = [];
      localStorage.setItem('cartItems', JSON.stringify(cartItems));
      renderCartItems();
      updateNavbarCounter();
      closeCart();
    }
  });
  
  document.addEventListener('keydown', (e) => {
    if (e.key === "Escape") {
      closeCart();
    }
  });
  
  // Inicializar al cargar la pÃ¡gina
  renderCartItems();
  updateNavbarCounter();
</script>
