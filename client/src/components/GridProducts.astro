---
const response = await fetch("https://fakestoreapi.com/products");
const products = await response.json();
---

<section class="grid grid-cols-[repeat(auto-fit,minmax(250px,1fr))] gap-8 p-8">
  {products.map((product, i) => 
    <div class="flex flex-col gap-4 bg-white/20 justify-between rounded-xl p-4 cursor-pointer transition-all hover:scale-105 hover:bg-white/30"> 
      <img src={product.image} class="w-full h-40 object-contain" alt="product" />
      <p class="text-sm">
        {product.title}
      </p>
      <div class="flex justify-between">
        <span class="font-semibold rounded-lg p-2 w-fit">
          S/ {(product.price * 3.7).toFixed(2)}
        </span>
        <span 
          class="add-item bg-purple-400 font-bold rounded-lg p-1 w-fit cursor-pointer hover:bg-purple-500 hover:scale-110 transition-all"
          data-product-id={String(product.id)}
          data-product-title={product.title}
          data-product-price={String(product.price)}
          data-product-image={product.image}
        >
          <img 
            src="https://img.icons8.com/?size=100&id=60953&format=png&color=000000" 
            alt="agregar producto" 
            class="w-8 object-contain"
          >
        </span>
      </div>
    </div>
  )}
</section>

<script define:vars={{ products }}>
  let cartItems = JSON.parse(localStorage.getItem('cartItems')) || [];
  
  const productsData = products;
  
  function addToCart(productId) {
    const product = productsData.find(p => p.id === productId);
    
    if (!product) {
      console.error('Producto no encontrado:', productId);
      return;
    }
    
    const existingItemIndex = cartItems.findIndex(item => item.id === product.id);
    
    if (existingItemIndex > -1) {
      cartItems[existingItemIndex].quantity += 1;
    } else {
      cartItems.push({
        id: product.id,
        title: product.title,
        price: parseFloat((product.price * 3.7).toFixed(2)),
        image: product.image,
        quantity: 1
      });
    }
    
    localStorage.setItem('cartItems', JSON.stringify(cartItems));
    
    const event = new CustomEvent('cart:updated', {
      detail: { cartItems, addedProduct: product }
    });
    document.dispatchEvent(event);

    showAddedToCartFeedback(product.title);
  }
  
  function showAddedToCartFeedback(productTitle) {
    let toast = document.getElementById('cart-toast');
    if (!toast) {
      toast = document.createElement('div');
      toast.id = 'cart-toast';
      toast.className = 'fixed top-20 right-0 bg-green-900 text-white px-4 py-2 rounded-lg shadow-lg z-50 transform translate-x-full transition-transform duration-300';
      document.body.appendChild(toast);
    }
    
    toast.textContent = `¡${productTitle.substring(0, 30)}... agregado al carrito!`;
    
    toast.classList.remove('translate-x-full');
    toast.classList.add('translate-x-0');
    
    setTimeout(() => {
      toast.classList.remove('translate-x-0');
      toast.classList.add('translate-x-full');
    }, 3000);
  }
  
  document.addEventListener('click', (e) => {
    const addButton = e.target.closest('.add-item');
    if (addButton) {
      const productId = parseInt(addButton.dataset.productId);
      console.log('Product ID clicked:', productId); // Debug
      
      if (!isNaN(productId)) {
        addToCart(productId);
      } else {
        console.error('ID de producto inválido:', addButton.dataset.productId);
      }
    }
  });
</script>
